#include "SerialManager.h"

////////////////////////////////////////////////////////////////////////////
SerialManager::SerialManager(unsigned long BaudRate, bool Debug)
{
  m_Debug = Debug;
  Serial.begin(BaudRate);
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteString(char* Message)
{
  Serial.println(Message);
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteString(char Message)
{
  Serial.println(Message);
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteDebug(char* Message)
{
  if (m_Debug)
  {
    Serial.println(Message);
  }
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteDebug(uint32_t Message)
{
  if (m_Debug)
  {
    Serial.println(Message);
  }
}

////////////////////////////////////////////////////////////////////////////
bool SerialManager::IsDataAvailable(uint8_t Bytes)
{
  if (Serial.available() >= Bytes)
  {
    return true;
  }
  else
  {
    return false;
  }
}

////////////////////////////////////////////////////////////////////////////
uint8_t SerialManager::GetBytesAvailable()
{
  return Serial.available();
}

////////////////////////////////////////////////////////////////////////////
uint8_t SerialManager::ReadByte()
{
  // return Serial.read();
  return Serial.read()-48;
}

////////////////////////////////////////////////////////////////////////////
uint8_t SerialManager::ReadBytes()
{
  return Serial.read();
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteByte(uint8_t Byte)
{
  Serial.write(Byte);
}

////////////////////////////////////////////////////////////////////////////
void SerialManager::WriteBytes(uint8_t Byte)
{
  Serial.write(Byte);
}